import dotenv from "dotenv";
import mongoose from "mongoose";
import mongooseConnect from "@/lib/mongooseConnect";
import User from "./User";
import Issue from "./Issue";
import Table from "./Table";
import TableProperty from "./TableProperty";
import UserStory from "./UserStory";



async function run() {

  // mongoose setup
  dotenv.config({path: ".env.local"});
  await mongooseConnect();

  await Table.deleteMany({});
  await TableProperty.deleteMany({});

  const table = await Table.create({name: "User"})

  const table_properties = await Promise.all([
    TableProperty.create({
      field: "user_id",
      field_type: "Unique ID",
      special: "Required, autogenerated" 
    }),
    TableProperty.create({
      field: "first_name",
      field_type: "Text",
      special: "Required"
    }),
    TableProperty.create({
      field: "last_name",
      field_type: "Text",
      special: "Required"
    }),
    TableProperty.create({
      field: "role",
      field_type: "Text",
      special: "Required, either “staff” or “admin”"
    }),
    TableProperty.create({
      field: "email",
      field_type: "Text",
      special: "Required"
    }),
    TableProperty.create({
      field: "email_verified_at",
      field_type: "Timestamp",
      special: ""
    }),
    TableProperty.create({
      field: "image_url",
      field_type: "Text",
      special: ""
    })
  ])

  table.table_properties = table_properties.map(tp => tp._id);
  await table.save();

  console.log(table);

  const populatedTable = await table.populate({
    path: 'table_properties',
    select: 'field field_type special'
  })

  console.log(populatedTable);

  await mongoose.disconnect();
}

run();













